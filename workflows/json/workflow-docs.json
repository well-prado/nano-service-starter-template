{
	"name": "Workflow Docs Generator",
	"description": "This workflow generates documentation for a given workflow in HTML format.",
	"version": "1.0.0",
	"trigger": {
		"http": {
			"method": "*",
			"path": "/:function?",
			"accept": "application/json"
		}
	},
	"steps": [
		{
			"name": "filter-request",
			"node": "@nanoservice-ts/if-else",
			"type": "module"
		}
	],
	"nodes": {
		"filter-request": {
			"conditions": [
				{
					"type": "if",
					"steps": [
						{
							"name": "workflow-ui",
							"node": "workflow-ui",
							"type": "module"
						}
					],
					"condition": "ctx.request.method.toLowerCase() === \"get\" && ctx.request.params.function === undefined"
				},
				{
					"type": "if",
					"steps": [
						{
							"name": "get-workflows",
							"node": "directory-manager",
							"type": "module"
						}
					],
					"condition": "ctx.request.method.toLowerCase() === \"get\" && ctx.request.params.function === \"workflows\""
				},
				{
					"type": "if",
					"steps": [
						{
							"name": "get-workflow-content",
							"node": "file-manager",
							"type": "module"
						},
						{
							"name": "generate-docs",
							"node": "openai",
							"type": "module"
						}
					],
					"condition": "ctx.request.method.toLowerCase() === \"get\" && ctx.request.params.function === \"workflow-doc\""
				},
				{
					"type": "else",
					"steps": [
						{
							"name": "method-not-allowed",
							"node": "error",
							"type": "module"
						}
					]
				}
			]
		},
		"workflow-ui": {
			"inputs": {}
		},
		"get-workflows": {
			"inputs": {
				"path": "js/process.env.WORKFLOWS_PATH + '/json'"
			}
		},
		"method-not-allowed": {
			"inputs": {
				"message": "Method not allowed"
			}
		},
		"get-workflow-content": {
			"inputs": {
				"path": "${ctx.request.query.path}"
			}
		},
		"generate-docs": {
			"inputs": {
				"cache_key": "${ctx.request.query.path}",
				"system": [
					"You are an AI technical writer specializing in Nanoservice-TS workflow documentation.",
					"Your task is to generate a structured HTML document that fully documents the provided JSON workflow.",
					"The documentation must clearly explain the trigger, steps, and nodes, including each nodeâ€™s function and its role in the workflow.",
					"Instructions:",
					"1. Generate a well-structured HTML document using <h1>, <h2>, <p>, <table>, and other relevant tags for readability.",
					"2. Include an overview of the workflow, explaining its name, description, and version.",
					"3. Describe the trigger section:",
					"- Explain how the workflow is initiated.",
					"- List all HTTP methods and parameters involved.",
					"4. Detail the steps:",
					"- Provide a step-by-step breakdown of how the workflow progresses.",
					"- Explain conditional logic and branching (if-else logic).",
					"5. Explain each node in-depth:",
					"- Name of the node.",
					"- Type (module or built-in).",
					"- Inputs used by the node.",
					"- Purpose of the node in the workflow.",
					"- How it interacts with other nodes.",
					"6. Ensure clarity and accuracy:",
					"- Use tables to present node inputs for easy reference.",
					"- Use formatted code blocks (<code>) for any inline JSON or example snippets.",
					"- Add comments or explanations in simple terms for non-technical readers.",
					"7. Ensure expected output:",
					"- Ensure that the output **ONLY** contains the `<body>` content of the HTML document, **excluding** the `<html>`, `<head>`, and `<style>` sections.",
					"- CSS styling must be a valid Tailwind CSS class."
				],
				"prompt": ["${ctx.response.data.content}."]
			}
		}
	}
}
